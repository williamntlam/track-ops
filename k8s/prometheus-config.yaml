---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # TrackOps Server
      - job_name: 'trackops-server'
        static_configs:
          - targets: ['trackops-server:8080']
        metrics_path: '/actuator/prometheus'
        scrape_interval: 10s
        scrape_timeout: 5s

      # PostgreSQL (if using postgres_exporter)
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-exporter:9187']
        scrape_interval: 30s

      # Redis (if using redis_exporter)
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
        scrape_interval: 30s

      # Kafka (if using kafka_exporter)
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-exporter:9308']
        scrape_interval: 30s

      # Node Exporter (system metrics)
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']
        scrape_interval: 30s

  alert_rules.yml: |
    groups:
      - name: trackops-alerts
        rules:
          # High error rate
          - alert: HighErrorRate
            expr: rate(api_errors_total[5m]) > 0.1
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High API error rate detected"
              description: "API error rate is {{ $value }} errors per second"

          # High response time
          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(api_response_duration_seconds_bucket[5m])) > 1
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High API response time detected"
              description: "95th percentile response time is {{ $value }} seconds"

          # Service down
          - alert: ServiceDown
            expr: up{job="trackops-server"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "TrackOps server is down"
              description: "TrackOps server has been down for more than 1 minute"

          # High memory usage
          - alert: HighMemoryUsage
            expr: (jvm_memory_used_bytes / jvm_memory_max_bytes) > 0.8
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is {{ $value | humanizePercentage }}"

          # Cache hit rate low
          - alert: LowCacheHitRate
            expr: rate(cache_hits_total[5m]) / (rate(cache_hits_total[5m]) + rate(cache_misses_total[5m])) < 0.7
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Low cache hit rate detected"
              description: "Cache hit rate is {{ $value | humanizePercentage }}"

          # Kafka publish errors
          - alert: KafkaPublishErrors
            expr: rate(kafka_publish_errors_total[5m]) > 0.01
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "Kafka publish errors detected"
              description: "Kafka publish error rate is {{ $value }} errors per second"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

      volumes:
      - name: grafana-storage
        emptyDir: {}

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
